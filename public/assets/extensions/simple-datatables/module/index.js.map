{"version":3,"file":"index.js","sources":["../../src/helpers.js","../../src/rows.js","../../src/columns.js","../../src/table.js","../../src/config.js","../../src/datatable.js"],"sourcesContent":["/**\n * Check is item is object\n * @return {Boolean}\n */\nexport const isObject = val => Object.prototype.toString.call(val) === \"[object Object]\"\n\n/**\n * Check for valid JSON string\n * @param  {String}   str\n * @return {Boolean|Array|Object}\n */\nexport const isJson = str => {\n    let t = !1\n    try {\n        t = JSON.parse(str)\n    } catch (e) {\n        return !1\n    }\n    return !(null === t || (!Array.isArray(t) && !isObject(t))) && t\n}\n\n/**\n * Create DOM element node\n * @param  {String}   nodeName nodeName\n * @param  {Object}   attrs properties and attributes\n * @return {Object}\n */\nexport const createElement = (nodeName, attrs) => {\n    const dom = document.createElement(nodeName)\n    if (attrs && \"object\" == typeof attrs) {\n        for (const attr in attrs) {\n            if (\"html\" === attr) {\n                dom.innerHTML = attrs[attr]\n            } else {\n                dom.setAttribute(attr, attrs[attr])\n            }\n        }\n    }\n    return dom\n}\n\nexport const flush = el => {\n    if (el instanceof NodeList) {\n        el.forEach(e => flush(e))\n    } else {\n        el.innerHTML = \"\"\n    }\n}\n\n/**\n * Create button helper\n * @param  {String}   class\n * @param  {Number}   page\n * @param  {String}   text\n * @return {Object}\n */\nexport const button = (className, page, text) => createElement(\n    \"li\",\n    {\n        class: className,\n        html: `<a href=\"#\" data-page=\"${page}\">${text}</a>`\n    }\n)\n\n/**\n * Bubble sort algorithm\n */\nexport const sortItems = (a, b) => {\n    let c\n    let d\n    if (1 === b) {\n        c = 0\n        d = a.length\n    } else {\n        if (b === -1) {\n            c = a.length - 1\n            d = -1\n        }\n    }\n    for (let e = !0; e;) {\n        e = !1\n        for (let f = c; f != d; f += b) {\n            if (a[f + b] && a[f].value > a[f + b].value) {\n                const g = a[f]\n                const h = a[f + b]\n                const i = g\n                a[f] = h\n                a[f + b] = i\n                e = !0\n            }\n        }\n    }\n    return a\n}\n\n/**\n * Pager truncation algorithm\n */\nexport const truncate = (a, b, c, d, ellipsis) => {\n    d = d || 2\n    let j\n    const e = 2 * d\n    let f = b - d\n    let g = b + d\n    const h = []\n    const i = []\n    if (b < 4 - d + e) {\n        g = 3 + e\n    } else if (b > c - (3 - d + e)) {\n        f = c - (2 + e)\n    }\n    for (let k = 1; k <= c; k++) {\n        if (1 == k || k == c || (k >= f && k <= g)) {\n            const l = a[k - 1]\n            l.classList.remove(\"active\")\n            h.push(l)\n        }\n    }\n    h.forEach(c => {\n        const d = c.children[0].getAttribute(\"data-page\")\n        if (j) {\n            const e = j.children[0].getAttribute(\"data-page\")\n            if (d - e == 2) i.push(a[e])\n            else if (d - e != 1) {\n                const f = createElement(\"li\", {\n                    class: \"ellipsis\",\n                    html: `<a href=\"#\">${ellipsis}</a>`\n                })\n                i.push(f)\n            }\n        }\n        i.push(c)\n        j = c\n    })\n\n    return i\n}\n","import {createElement} from \"./helpers\"\n/**\n * Rows API\n * @param {Object} instance DataTable instance\n * @param {Array} rows\n */\nexport class Rows {\n    constructor(dt) {\n        this.dt = dt\n\n        this.cursor = false\n    }\n\n    /**\n     * Build a new row\n     * @param  {Array} row\n     * @return {HTMLElement}\n     */\n    build(row) {\n        const tr = createElement(\"tr\")\n\n        let headings = this.dt.headings\n\n        if (!headings.length) {\n            headings = row.map(() => \"\")\n        }\n\n        headings.forEach((h, i) => {\n            const td = createElement(\"td\")\n\n            // Fixes #29\n            if (!row[i] || !row[i].length) {\n                row[i] = \"\"\n            }\n\n            td.innerHTML = row[i]\n\n            td.data = row[i]\n\n            tr.appendChild(td)\n        })\n\n        return tr\n    }\n\n    setCursor(row=false) {\n        if (this.cursor) {\n            this.cursor.classList.remove(\"dataTable-cursor\")\n        }\n        if (row) {\n            row.classList.add(\"dataTable-cursor\")\n            this.cursor = row\n        }\n    }\n\n    render(row) {\n        return row\n    }\n\n    /**\n     * Add new row\n     * @param {Array} select\n     */\n    add(data) {\n        if (Array.isArray(data)) {\n            const dt = this.dt\n            // Check for multiple rows\n            if (Array.isArray(data[0])) {\n                data.forEach(row => {\n                    dt.data.push(this.build(row))\n                })\n            } else {\n                dt.data.push(this.build(data))\n            }\n\n            // We may have added data to an empty table\n            if ( dt.data.length ) {\n                dt.hasRows = true\n            }\n\n\n            this.update()\n\n            dt.columns.rebuild()\n        }\n\n    }\n\n    /**\n     * Remove row(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        const dt = this.dt\n\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n\n            select.forEach(row => {\n                dt.data.splice(row, 1)\n            })\n        } else if (select == \"all\") {\n            dt.data = [];\n        } else {\n            dt.data.splice(select, 1)\n        }\n\n        // We may have emptied the table\n        if ( !dt.data.length ) {\n            dt.hasRows = false\n        }\n\n        this.update()\n        dt.columns.rebuild()\n    }\n\n    /**\n     * Update row indexes\n     * @return {Void}\n     */\n    update() {\n        this.dt.data.forEach((row, i) => {\n            row.dataIndex = i\n        })\n    }\n\n    /**\n     * Find index of row by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Number}\n     */\n    findRowIndex(columnIndex, value) {\n        // returns row index of first case-insensitive string match\n        // inside the td innerText at specific column index\n        return this.dt.data.findIndex(\n            tr => tr.children[columnIndex].innerText.toLowerCase().includes(String(value).toLowerCase())\n        )\n    }\n\n    /**\n     * Find index, row, and column data by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Object}\n     */\n    findRow(columnIndex, value) {\n        // get the row index\n        const index = this.findRowIndex(columnIndex, value)\n        // exit if not found\n        if (index < 0) {\n            return {\n                index: -1,\n                row: null,\n                cols: []\n            }\n        }\n        // get the row from data\n        const row = this.dt.data[index]\n        // return innerHTML of each td\n        const cols = [...row.cells].map(r => r.innerHTML)\n        // return everything\n        return {\n            index,\n            row,\n            cols\n        }\n    }\n\n    /**\n     * Update a row with new data\n     * @param  {Number} select\n     * @param  {Array} data\n     * @return {Void}\n     */\n    updateRow(select, data) {\n        const row = this.build(data)\n        this.dt.data.splice(select, 1, row)\n        this.update()\n        this.dt.columns.rebuild()\n    }\n}\n","import {sortItems} from \"./helpers\"\n\n\nexport class Columns {\n    constructor(dt) {\n        this.dt = dt\n    }\n\n    /**\n     * Swap two columns\n     * @return {Void}\n     */\n    swap(columns) {\n        if (columns.length && columns.length === 2) {\n            const cols = []\n\n            // Get the current column indexes\n            this.dt.headings.forEach((h, i) => {\n                cols.push(i)\n            })\n\n            const x = columns[0]\n            const y = columns[1]\n            const b = cols[y]\n            cols[y] = cols[x]\n            cols[x] = b\n\n            this.order(cols)\n        }\n    }\n\n    /**\n     * Reorder the columns\n     * @return {Array} columns  Array of ordered column indexes\n     */\n    order(columns) {\n        let a\n        let b\n        let c\n        let d\n        let h\n        let s\n        let cell\n\n        const temp = [\n            [],\n            [],\n            [],\n            []\n        ]\n\n        const dt = this.dt\n\n        // Order the headings\n        columns.forEach((column, x) => {\n            h = dt.headings[column]\n            s = h.getAttribute(\"data-sortable\") !== \"false\"\n            a = h.cloneNode(true)\n            a.originalCellIndex = x\n            a.sortable = s\n\n            temp[0].push(a)\n\n            if (!dt.hiddenColumns.includes(column)) {\n                b = h.cloneNode(true)\n                b.originalCellIndex = x\n                b.sortable = s\n\n                temp[1].push(b)\n            }\n        })\n\n        // Order the row cells\n        dt.data.forEach((row, i) => {\n            c = row.cloneNode(false)\n            d = row.cloneNode(false)\n\n            c.dataIndex = d.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                c.searchIndex = d.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            columns.forEach(column => {\n                cell = row.cells[column].cloneNode(true)\n                cell.data = row.cells[column].data\n                c.appendChild(cell)\n\n                if (!dt.hiddenColumns.includes(column)) {\n                    cell = row.cells[column].cloneNode(true)\n                    cell.data = row.cells[column].data\n                    d.appendChild(cell)\n                }\n            })\n\n            temp[2].push(c)\n            temp[3].push(d)\n        })\n\n        dt.headings = temp[0]\n        dt.activeHeadings = temp[1]\n\n        dt.data = temp[2]\n        dt.activeRows = temp[3]\n\n        // Update\n        dt.update()\n    }\n\n    /**\n     * Hide columns\n     * @return {Void}\n     */\n    hide(columns) {\n        if (columns.length) {\n            const dt = this.dt\n\n            columns.forEach(column => {\n                if (!dt.hiddenColumns.includes(column)) {\n                    dt.hiddenColumns.push(column)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Show columns\n     * @return {Void}\n     */\n    show(columns) {\n        if (columns.length) {\n            let index\n            const dt = this.dt\n\n            columns.forEach(column => {\n                index = dt.hiddenColumns.indexOf(column)\n                if (index > -1) {\n                    dt.hiddenColumns.splice(index, 1)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Check column(s) visibility\n     * @return {Boolean}\n     */\n    visible(columns) {\n        let cols\n        const dt = this.dt\n\n        columns = columns || dt.headings.map(th => th.originalCellIndex)\n\n        if (!isNaN(columns)) {\n            cols = !dt.hiddenColumns.includes(columns)\n        } else if (Array.isArray(columns)) {\n            cols = []\n            columns.forEach(column => {\n                cols.push(!dt.hiddenColumns.includes(column))\n            })\n        }\n\n        return cols\n    }\n\n    /**\n     * Add a new column\n     * @param {Object} data\n     */\n    add(data) {\n        let td\n        const th = document.createElement(\"th\")\n\n        if (!this.dt.headings.length) {\n            this.dt.insert({\n                headings: [data.heading],\n                data: data.data.map(i => [i])\n            })\n            this.rebuild()\n            return\n        }\n\n        if (!this.dt.hiddenHeader) {\n            if (data.heading.nodeName) {\n                th.appendChild(data.heading)\n            } else {\n                th.innerHTML = data.heading\n            }\n        } else {\n            th.innerHTML = \"\"\n        }\n\n        this.dt.headings.push(th)\n\n        this.dt.data.forEach((row, i) => {\n            if (data.data[i]) {\n                td = document.createElement(\"td\")\n\n                if (data.data[i].nodeName) {\n                    td.appendChild(data.data[i])\n                } else {\n                    td.innerHTML = data.data[i]\n                }\n\n                td.data = td.innerHTML\n\n                if (data.render) {\n                    td.innerHTML = data.render.call(this, td.data, td, row)\n                }\n\n                row.appendChild(td)\n            }\n        })\n\n        if (data.type) {\n            th.setAttribute(\"data-type\", data.type)\n        }\n        if (data.format) {\n            th.setAttribute(\"data-format\", data.format)\n        }\n\n        if (data.hasOwnProperty(\"sortable\")) {\n            th.sortable = data.sortable\n            th.setAttribute(\"data-sortable\", data.sortable === true ? \"true\" : \"false\")\n        }\n\n        this.rebuild()\n\n        this.dt.renderHeader()\n    }\n\n    /**\n     * Remove column(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n            select.forEach(column => this.remove(column))\n        } else {\n            this.dt.headings.splice(select, 1)\n\n            this.dt.data.forEach(row => {\n                row.removeChild(row.cells[select])\n            })\n        }\n\n        this.rebuild()\n    }\n\n    /**\n     * Filter by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @filter {array} filter - optional parameter with a list of strings\n     * @return {void}\n     */\n    filter(column, dir, init, terms) {\n        const dt = this.dt\n\n        // Creates a internal state that manages filters if there are none\n        if ( !dt.filterState ) {\n            dt.filterState = {\n                originalData: dt.data\n            }\n        }\n\n        // If that column is was not filtered yet, we need to create its state\n        if ( !dt.filterState[column] ) {\n\n            // append a filter that selects all rows, 'resetting' the filter\n            const filters = [...terms, () => true]\n\n            dt.filterState[column] = (\n                function() {\n                    let i = 0;\n                    return () => filters[i++ % (filters.length)]\n                }()\n            )\n        }\n\n        // Apply the filter and rebuild table\n        const rowFilter = dt.filterState[column]() // fetches next filter\n        const filteredRows = Array.from(dt.filterState.originalData).filter(tr => {\n            const cell = tr.cells[column]\n            const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n\n            // If the filter is a function, call it, if it is a string, compare it\n            return (typeof rowFilter) === \"function\" ? rowFilter(content) : content === rowFilter;\n        })\n\n        dt.data = filteredRows\n\n        if (!dt.data.length) {\n            dt.clear()\n            dt.hasRows = false\n            dt.setMessage(dt.options.labels.noRows)\n        } else {\n            this.rebuild()\n            dt.update()\n        }\n\n        if (!init) {\n            dt.emit(\"datatable.sort\", column, dir)\n        }\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @return {void}\n     */\n    sort(column, dir, init) {\n        const dt = this.dt\n\n        // Check column is present\n        if (dt.hasHeadings && (column < 0 || column > dt.headings.length)) {\n            return false\n        }\n\n        //If there is a filter for this column, apply it instead of sorting\n        const filterTerms = dt.options.filters &&\n              dt.options.filters[dt.headings[column].textContent]\n        if ( filterTerms && filterTerms.length !== 0 ) {\n            this.filter(column, dir, init, filterTerms)\n            return;\n        }\n\n        dt.sorting = true\n\n        if (!init) {\n            dt.emit(\"datatable.sorting\", column, dir)\n        }\n\n        let rows = dt.data\n        const alpha = []\n        const numeric = []\n        let a = 0\n        let n = 0\n        const th = dt.headings[column]\n\n        const waitFor = []\n\n        // Check for date format\n        if (th.getAttribute(\"data-type\") === \"date\") {\n            let format = false\n            const formatted = th.hasAttribute(\"data-format\")\n\n            if (formatted) {\n                format = th.getAttribute(\"data-format\")\n            }\n            waitFor.push(import(\"./date\").then(({parseDate}) => date => parseDate(date, format)))\n        }\n\n        Promise.all(waitFor).then(importedFunctions => {\n            const parseFunction = importedFunctions[0] // only defined if date\n            Array.from(rows).forEach(tr => {\n                const cell = tr.cells[column]\n                const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n                let num\n                if (parseFunction) {\n                    num = parseFunction(content)\n                } else if (typeof content===\"string\") {\n                    num = content.replace(/(\\$|,|\\s|%)/g, \"\")\n                } else {\n                    num = content\n                }\n\n                if (parseFloat(num) == num) {\n                    numeric[n++] = {\n                        value: Number(num),\n                        row: tr\n                    }\n                } else {\n                    alpha[a++] = {\n                        value: typeof content===\"string\" ? content.toLowerCase() : content,\n                        row: tr\n                    }\n                }\n            })\n\n            /* Sort according to direction (ascending or descending) */\n            if (!dir) {\n                if (th.classList.contains(\"asc\")) {\n                    dir = \"desc\"\n                } else {\n                    dir = \"asc\"\n                }\n            }\n            let top\n            let btm\n            if (dir == \"desc\") {\n                top = sortItems(alpha, -1)\n                btm = sortItems(numeric, -1)\n                th.classList.remove(\"asc\")\n                th.classList.add(\"desc\")\n                th.setAttribute(\"aria-sort\", \"descending\")\n            } else {\n                top = sortItems(numeric, 1)\n                btm = sortItems(alpha, 1)\n                th.classList.remove(\"desc\")\n                th.classList.add(\"asc\")\n                th.setAttribute(\"aria-sort\", \"ascending\")\n            }\n\n            /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\n            if (dt.lastTh && th != dt.lastTh) {\n                dt.lastTh.classList.remove(\"desc\")\n                dt.lastTh.classList.remove(\"asc\")\n                dt.lastTh.removeAttribute(\"aria-sort\")\n            }\n\n            dt.lastTh = th\n\n            /* Reorder the table */\n            rows = top.concat(btm)\n\n            dt.data = []\n            const indexes = []\n\n            rows.forEach((v, i) => {\n                dt.data.push(v.row)\n\n                if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {\n                    indexes.push(i)\n                }\n            })\n\n            dt.searchData = indexes\n\n            this.rebuild()\n\n            dt.update()\n\n            if (!init) {\n                dt.emit(\"datatable.sort\", column, dir)\n            }\n        })\n    }\n\n    /**\n     * Rebuild the columns\n     * @return {Void}\n     */\n    rebuild() {\n        let a\n        let b\n        let c\n        let d\n        const dt = this.dt\n        const temp = []\n\n        dt.activeRows = []\n        dt.activeHeadings = []\n\n        dt.headings.forEach((th, i) => {\n            th.originalCellIndex = i\n            th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n            if (!dt.hiddenColumns.includes(i)) {\n                dt.activeHeadings.push(th)\n            }\n        })\n\n        // Loop over the rows and reorder the cells\n        dt.data.forEach((row, i) => {\n            a = row.cloneNode(false)\n            b = row.cloneNode(false)\n\n            a.dataIndex = b.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                a.searchIndex = b.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            Array.from(row.cells).forEach(cell => {\n                c = cell.cloneNode(true)\n                c.data = cell.data\n                a.appendChild(c)\n\n                if (!dt.hiddenColumns.includes(c.cellIndex)) {\n                    d = c.cloneNode(true)\n                    d.data = c.data\n                    b.appendChild(d)\n                }\n            })\n\n            // Append the fragment with the ordered cells\n            temp.push(a)\n            dt.activeRows.push(b)\n        })\n\n        dt.data = temp\n\n        dt.update()\n    }\n}\n","import {createElement} from \"./helpers\"\n\n/**\n * Parse data to HTML table\n */\nexport const dataToTable = function (data) {\n    let thead = false\n    let tbody = false\n\n    data = data || this.options.data\n\n    if (data.headings) {\n        thead = createElement(\"thead\")\n        const tr = createElement(\"tr\")\n        data.headings.forEach(col => {\n            const td = createElement(\"th\", {\n                html: col\n            })\n            tr.appendChild(td)\n        })\n\n        thead.appendChild(tr)\n    }\n\n    if (data.data && data.data.length) {\n        tbody = createElement(\"tbody\")\n        data.data.forEach(rows => {\n            if (data.headings) {\n                if (data.headings.length !== rows.length) {\n                    throw new Error(\n                        \"The number of rows do not match the number of headings.\"\n                    )\n                }\n            }\n            const tr = createElement(\"tr\")\n            rows.forEach(value => {\n                const td = createElement(\"td\", {\n                    html: value\n                })\n                tr.appendChild(td)\n            })\n            tbody.appendChild(tr)\n        })\n    }\n\n    if (thead) {\n        if (this.dom.tHead !== null) {\n            this.dom.removeChild(this.dom.tHead)\n        }\n        this.dom.appendChild(thead)\n    }\n\n    if (tbody) {\n        if (this.dom.tBodies.length) {\n            this.dom.removeChild(this.dom.tBodies[0])\n        }\n        this.dom.appendChild(tbody)\n    }\n}\n","/**\n * Default configuration\n * @typ {Object}\n */\nexport const defaultConfig = {\n    sortable: true,\n    searchable: true,\n\n    // Pagination\n    paging: true,\n    perPage: 10,\n    perPageSelect: [5, 10, 15, 20, 25],\n    nextPrev: true,\n    firstLast: false,\n    prevText: \"&lsaquo;\",\n    nextText: \"&rsaquo;\",\n    firstText: \"&laquo;\",\n    lastText: \"&raquo;\",\n    ellipsisText: \"&hellip;\",\n    ascText: \"▴\",\n    descText: \"▾\",\n    truncatePager: true,\n    pagerDelta: 2,\n\n    scrollY: \"\",\n\n    fixedColumns: true,\n    fixedHeight: false,\n\n    header: true,\n    hiddenHeader: false,\n    footer: false,\n\n    tabIndex: false,\n    rowNavigation: false,\n\n    // Customise the display text\n    labels: {\n        placeholder: \"Search...\", // The search input placeholder\n        perPage: \"{select} entries per page\", // per-page dropdown label\n        noRows: \"No entries found\", // Message shown when there are no records to show\n        noResults: \"No results match your search query\", // Message shown when there are no search results\n        info: \"Showing {start} to {end} of {rows} entries\" //\n    },\n\n    // Customise the layout\n    layout: {\n        top: \"{select}{search}\",\n        bottom: \"{info}{pager}\"\n    }\n}\n","import {Rows} from \"./rows\"\nimport {Columns} from \"./columns\"\nimport {dataToTable} from \"./table\"\nimport {defaultConfig} from \"./config\"\nimport {\n    isObject,\n    isJson,\n    createElement,\n    flush,\n    button,\n    truncate\n} from \"./helpers\"\n\n\nexport class DataTable {\n    constructor(table, options = {}) {\n\n        const dom = typeof table === \"string\" ? document.querySelector(table) : table\n\n        // user options\n        this.options = {\n            ...defaultConfig,\n            ...options,\n            layout: {\n                ...defaultConfig.layout,\n                ...options.layout\n            },\n            labels: {\n                ...defaultConfig.labels,\n                ...options.labels\n            }\n        }\n\n        this.rows = new Rows(this)\n        this.columns = new Columns(this)\n\n        this.initialized = false\n\n        this.initialLayout = dom.innerHTML\n        this.initialSortable = this.options.sortable\n\n        if (this.options.tabIndex) {\n            dom.tabIndex = this.options.tabIndex\n        } else if (this.options.rowNavigation && dom.tabIndex === -1) {\n            dom.tabIndex = 0\n        }\n\n        // Disable manual sorting if no header is present (#4)\n        if (!this.options.header) {\n            this.options.sortable = false\n        }\n\n        if (dom.tHead === null) {\n            if (!this.options.data ||\n                (this.options.data && !this.options.data.headings)\n            ) {\n                this.options.sortable = false\n            }\n        }\n\n        if (dom.tBodies.length && !dom.tBodies[0].rows.length) {\n            if (this.options.data) {\n                if (!this.options.data.data) {\n                    throw new Error(\n                        \"You seem to be using the data option, but you've not defined any rows.\"\n                    )\n                }\n            }\n        }\n\n        this.dom = dom\n\n        this.table = this.dom // For compatibility. Remove in version 4\n\n        this.listeners = {\n            onResize: event => this.onResize(event)\n        }\n\n        this.init()\n    }\n\n    /**\n     * Initialize the instance\n     * @param  {Object} options\n     * @return {Void}\n     */\n    init(options) {\n        if (this.initialized || this.dom.classList.contains(\"dataTable-table\")) {\n            return false\n        }\n\n        Object.assign(this.options, options || {})\n\n        this.currentPage = 1\n        this.onFirstPage = true\n\n        this.hiddenColumns = []\n        this.columnRenderers = []\n        this.selectedColumns = []\n\n        this.render()\n\n        setTimeout(() => {\n            this.emit(\"datatable.init\")\n            this.initialized = true\n\n            if (this.options.plugins) {\n                Object.entries(this.options.plugins).forEach(([plugin, options]) => {\n                    if (this[plugin] && typeof this[plugin] === \"function\") {\n                        this[plugin] = this[plugin](options, {createElement})\n\n                        // Init plugin\n                        if (options.enabled && this[plugin].init && typeof this[plugin].init === \"function\") {\n                            this[plugin].init()\n                        }\n                    }\n                })\n            }\n        }, 10)\n    }\n\n    /**\n     * Render the instance\n     * @param  {String} type\n     * @return {Void}\n     */\n    render() {\n        let template = \"\"\n\n        // Convert data to HTML\n        if (this.options.data) {\n            dataToTable.call(this)\n        }\n\n        // Store references\n        this.body = this.dom.tBodies[0]\n        this.head = this.dom.tHead\n        this.foot = this.dom.tFoot\n\n        if (!this.body) {\n            this.body = createElement(\"tbody\")\n\n            this.dom.appendChild(this.body)\n        }\n\n        this.hasRows = this.body.rows.length > 0\n\n        // Make a tHead if there isn't one (fixes #8)\n        if (!this.head) {\n            const h = createElement(\"thead\")\n            const t = createElement(\"tr\")\n\n            if (this.hasRows) {\n                Array.from(this.body.rows[0].cells).forEach(() => {\n                    t.appendChild(createElement(\"th\"))\n                })\n\n                h.appendChild(t)\n            }\n\n            this.head = h\n\n            this.dom.insertBefore(this.head, this.body)\n\n            this.hiddenHeader = this.options.hiddenHeader\n        }\n\n        this.headings = []\n        this.hasHeadings = this.head.rows.length > 0\n\n        if (this.hasHeadings) {\n            this.header = this.head.rows[0]\n            this.headings = [].slice.call(this.header.cells)\n        }\n\n        // Header\n        if (!this.options.header) {\n            if (this.head) {\n                this.dom.removeChild(this.dom.tHead)\n            }\n        }\n\n        // Footer\n        if (this.options.footer) {\n            if (this.head && !this.foot) {\n                this.foot = createElement(\"tfoot\", {\n                    html: this.head.innerHTML\n                })\n                this.dom.appendChild(this.foot)\n            }\n        } else {\n            if (this.foot) {\n                this.dom.removeChild(this.dom.tFoot)\n            }\n        }\n\n        // Build\n        this.wrapper = createElement(\"div\", {\n            class: \"dataTable-wrapper dataTable-loading\"\n        })\n\n        // Template for custom layouts\n        template += \"<div class='dataTable-top'>\"\n        template += this.options.layout.top\n        template += \"</div>\"\n        if (this.options.scrollY.length) {\n            template += `<div class='dataTable-container' style='height: ${this.options.scrollY}; overflow-Y: auto;'></div>`\n        } else {\n            template += \"<div class='dataTable-container'></div>\"\n        }\n        template += \"<div class='dataTable-bottom'>\"\n        template += this.options.layout.bottom\n        template += \"</div>\"\n\n        // Info placement\n        template = template.replace(\"{info}\", this.options.paging ? \"<div class='dataTable-info'></div>\" : \"\")\n\n        // Per Page Select\n        if (this.options.paging && this.options.perPageSelect) {\n            let wrap = \"<div class='dataTable-dropdown'><label>\"\n            wrap += this.options.labels.perPage\n            wrap += \"</label></div>\"\n\n            // Create the select\n            const select = createElement(\"select\", {\n                class: \"dataTable-selector\"\n            })\n\n            // Create the options\n            this.options.perPageSelect.forEach(val => {\n                const selected = val === this.options.perPage\n                const option = new Option(val, val, selected, selected)\n                select.add(option)\n            })\n\n            // Custom label\n            wrap = wrap.replace(\"{select}\", select.outerHTML)\n\n            // Selector placement\n            template = template.replace(\"{select}\", wrap)\n        } else {\n            template = template.replace(\"{select}\", \"\")\n        }\n\n        // Searchable\n        if (this.options.searchable) {\n            const form =\n                `<div class='dataTable-search'><input class='dataTable-input' placeholder='${this.options.labels.placeholder}' type='text'></div>`\n\n            // Search input placement\n            template = template.replace(\"{search}\", form)\n        } else {\n            template = template.replace(\"{search}\", \"\")\n        }\n\n        if (this.hasHeadings) {\n            // Sortable\n            this.renderHeader()\n        }\n\n        // Add table class\n        this.dom.classList.add(\"dataTable-table\")\n\n        // Paginator\n        const paginatorWrapper = createElement(\"nav\", {\n            class: \"dataTable-pagination\"\n        })\n        const paginator = createElement(\"ul\", {\n            class: \"dataTable-pagination-list\"\n        })\n        paginatorWrapper.appendChild(paginator)\n\n        // Pager(s) placement\n        template = template.replace(/\\{pager\\}/g, paginatorWrapper.outerHTML)\n        this.wrapper.innerHTML = template\n\n        this.container = this.wrapper.querySelector(\".dataTable-container\")\n\n        this.pagers = this.wrapper.querySelectorAll(\".dataTable-pagination-list\")\n\n        this.label = this.wrapper.querySelector(\".dataTable-info\")\n\n        // Insert in to DOM tree\n        this.dom.parentNode.replaceChild(this.wrapper, this.dom)\n        this.container.appendChild(this.dom)\n\n        // Store the table dimensions\n        this.rect = this.dom.getBoundingClientRect()\n\n        // Convert rows to array for processing\n        this.data = Array.from(this.body.rows)\n        this.activeRows = this.data.slice()\n        this.activeHeadings = this.headings.slice()\n\n        // Update\n        this.update()\n\n\n        this.setColumns()\n\n\n        // Fix height\n        this.fixHeight()\n\n        // Fix columns\n        this.fixColumns()\n\n        // Class names\n        if (!this.options.header) {\n            this.wrapper.classList.add(\"no-header\")\n        }\n\n        if (!this.options.footer) {\n            this.wrapper.classList.add(\"no-footer\")\n        }\n\n        if (this.options.sortable) {\n            this.wrapper.classList.add(\"sortable\")\n        }\n\n        if (this.options.searchable) {\n            this.wrapper.classList.add(\"searchable\")\n        }\n\n        if (this.options.fixedHeight) {\n            this.wrapper.classList.add(\"fixed-height\")\n        }\n\n        if (this.options.fixedColumns) {\n            this.wrapper.classList.add(\"fixed-columns\")\n        }\n\n        this.bindEvents()\n    }\n\n    /**\n     * Render the page\n     * @return {Void}\n     */\n    renderPage(lastRowCursor=false) {\n        if (this.hasHeadings) {\n            flush(this.header)\n\n            this.activeHeadings.forEach(th => this.header.appendChild(th))\n        }\n\n\n        if (this.hasRows && this.totalPages) {\n            if (this.currentPage > this.totalPages) {\n                this.currentPage = 1\n            }\n\n            // Use a fragment to limit touching the DOM\n            const index = this.currentPage - 1\n\n            const frag = document.createDocumentFragment()\n            this.pages[index].forEach(row => frag.appendChild(this.rows.render(row)))\n\n            this.clear(frag)\n\n            this.onFirstPage = this.currentPage === 1\n            this.onLastPage = this.currentPage === this.lastPage\n        } else {\n            this.setMessage(this.options.labels.noRows)\n        }\n\n        // Update the info\n        let current = 0\n\n        let f = 0\n        let t = 0\n        let items\n\n        if (this.totalPages) {\n            current = this.currentPage - 1\n            f = current * this.options.perPage\n            t = f + this.pages[current].length\n            f = f + 1\n            items = this.searching ? this.searchData.length : this.data.length\n        }\n\n        if (this.label && this.options.labels.info.length) {\n            // CUSTOM LABELS\n            const string = this.options.labels.info\n                .replace(\"{start}\", f)\n                .replace(\"{end}\", t)\n                .replace(\"{page}\", this.currentPage)\n                .replace(\"{pages}\", this.totalPages)\n                .replace(\"{rows}\", items)\n\n            this.label.innerHTML = items ? string : \"\"\n        }\n\n        if (this.currentPage == 1) {\n            this.fixHeight()\n        }\n\n        if (this.options.rowNavigation) {\n            if (!this.rows.cursor || !this.pages[this.currentPage-1].includes(this.rows.cursor)) {\n                const rows = this.pages[this.currentPage-1]\n                if (lastRowCursor) {\n                    this.rows.setCursor(rows[rows.length-1])\n                } else {\n                    this.rows.setCursor(rows[0])\n                }\n\n            }\n        }\n    }\n\n    /**\n     * Render the pager(s)\n     * @return {Void}\n     */\n    renderPager() {\n        flush(this.pagers)\n\n        if (this.totalPages > 1) {\n            const c = \"pager\"\n            const frag = document.createDocumentFragment()\n            const prev = this.onFirstPage ? 1 : this.currentPage - 1\n            const next = this.onLastPage ? this.totalPages : this.currentPage + 1\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, 1, this.options.firstText))\n            }\n\n            // prev button\n            if (this.options.nextPrev && !this.onFirstPage) {\n                frag.appendChild(button(c, prev, this.options.prevText))\n            }\n\n            let pager = this.links\n\n            // truncate the links\n            if (this.options.truncatePager) {\n                pager = truncate(\n                    this.links,\n                    this.currentPage,\n                    this.pages.length,\n                    this.options.pagerDelta,\n                    this.options.ellipsisText\n                )\n            }\n\n            // active page link\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // append the links\n            pager.forEach(p => {\n                p.classList.remove(\"active\")\n                frag.appendChild(p)\n            })\n\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // next button\n            if (this.options.nextPrev && !this.onLastPage) {\n                frag.appendChild(button(c, next, this.options.nextText))\n            }\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, this.totalPages, this.options.lastText))\n            }\n\n            // We may have more than one pager\n            this.pagers.forEach(pager => {\n                pager.appendChild(frag.cloneNode(true))\n            })\n        }\n    }\n\n    /**\n     * Render the header\n     * @return {Void}\n     */\n    renderHeader() {\n        this.labels = []\n\n        if (this.headings && this.headings.length) {\n            this.headings.forEach((th, i) => {\n\n                this.labels[i] = th.textContent\n\n                if (th.firstElementChild && th.firstElementChild.classList.contains(\"dataTable-sorter\")) {\n                    th.innerHTML = th.firstElementChild.innerHTML\n                }\n\n                th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n\n                th.originalCellIndex = i\n                if (this.options.sortable && th.sortable) {\n                    const link = createElement(\"a\", {\n                        href: \"#\",\n                        class: \"dataTable-sorter\",\n                        html: th.innerHTML\n                    })\n\n                    th.innerHTML = \"\"\n                    th.setAttribute(\"data-sortable\", \"\")\n                    th.appendChild(link)\n                }\n            })\n        }\n\n        this.fixColumns()\n    }\n\n    /**\n     * Bind event listeners\n     * @return {[type]} [description]\n     */\n    bindEvents() {\n        // Per page selector\n        if (this.options.perPageSelect) {\n            const selector = this.wrapper.querySelector(\".dataTable-selector\")\n            if (selector) {\n                // Change per page\n                selector.addEventListener(\"change\", () => {\n                    this.options.perPage = parseInt(selector.value, 10)\n                    this.update()\n\n                    this.fixHeight()\n\n                    this.emit(\"datatable.perpage\", this.options.perPage)\n                }, false)\n            }\n        }\n\n        // Search input\n        if (this.options.searchable) {\n            this.input = this.wrapper.querySelector(\".dataTable-input\")\n            if (this.input) {\n                this.input.addEventListener(\"keyup\", () => this.search(this.input.value), false)\n            }\n        }\n\n        // Pager(s) / sorting\n        this.wrapper.addEventListener(\"click\", e => {\n            const t = e.target.closest(\"a\")\n            if (t && (t.nodeName.toLowerCase() === \"a\")) {\n                if (t.hasAttribute(\"data-page\")) {\n                    this.page(t.getAttribute(\"data-page\"))\n                    e.preventDefault()\n                } else if (\n                    this.options.sortable &&\n                    t.classList.contains(\"dataTable-sorter\") &&\n                    t.parentNode.getAttribute(\"data-sortable\") != \"false\"\n                ) {\n                    this.columns.sort(this.headings.indexOf(t.parentNode))\n                    e.preventDefault()\n                }\n            }\n        }, false)\n\n        if (this.options.rowNavigation) {\n            this.table.addEventListener(\"keydown\", event => {\n                if (event.keyCode === 38) {\n                    if (this.rows.cursor.previousElementSibling) {\n                        this.rows.setCursor(this.rows.cursor.previousElementSibling)\n                        event.preventDefault()\n                        event.stopPropagation()\n                    } else if (!this.onFirstPage) {\n                        this.page(this.currentPage-1, true)\n                    }\n                } else if (event.keyCode === 40) {\n                    if (this.rows.cursor.nextElementSibling) {\n                        this.rows.setCursor(this.rows.cursor.nextElementSibling)\n                        event.preventDefault()\n                        event.stopPropagation()\n                    } else if (!this.onLastPage) {\n                        this.page(this.currentPage+1)\n                    }\n                } else if ([13, 32].includes(event.keyCode)) {\n                    this.emit(\"datatable.selectrow\", this.rows.cursor, event)\n                }\n            })\n            this.body.addEventListener(\"mousedown\", event => {\n                if (this.table.matches(\":focus\")) {\n                    const row = Array.from(this.body.rows).find(row => row.contains(event.target))\n                    this.emit(\"datatable.selectrow\", row, event)\n                }\n\n            })\n        } else {\n            this.body.addEventListener(\"mousedown\", event => {\n                const row = Array.from(this.body.rows).find(row => row.contains(event.target))\n                this.emit(\"datatable.selectrow\", row, event)\n            })\n        }\n\n        window.addEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * execute on resize\n     */\n    onResize() {\n        this.rect = this.container.getBoundingClientRect()\n        if (!this.rect.width) {\n            // No longer shown, likely no longer part of DOM. Give up.\n            return\n        }\n        this.fixColumns()\n    }\n\n    /**\n     * Set up columns\n     * @return {[type]} [description]\n     */\n    setColumns(ajax) {\n\n        if (!ajax) {\n            this.data.forEach(row => {\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n        }\n\n        // Check for the columns option\n        if (this.options.columns && this.headings.length) {\n\n            this.options.columns.forEach(data => {\n\n                // convert single column selection to array\n                if (!Array.isArray(data.select)) {\n                    data.select = [data.select]\n                }\n\n                if (data.hasOwnProperty(\"render\") && typeof data.render === \"function\") {\n                    this.selectedColumns = this.selectedColumns.concat(data.select)\n\n                    this.columnRenderers.push({\n                        columns: data.select,\n                        renderer: data.render\n                    })\n                }\n\n                // Add the data attributes to the th elements\n                data.select.forEach(column => {\n                    const th = this.headings[column]\n                    if (!th) {\n                        return\n                    }\n                    if (data.type) {\n                        th.setAttribute(\"data-type\", data.type)\n                    }\n                    if (data.format) {\n                        th.setAttribute(\"data-format\", data.format)\n                    }\n                    if (data.hasOwnProperty(\"sortable\")) {\n                        th.setAttribute(\"data-sortable\", data.sortable)\n                    }\n\n                    if (data.hasOwnProperty(\"hidden\")) {\n                        if (data.hidden !== false) {\n                            this.columns.hide([column])\n                        }\n                    }\n\n                    if (data.hasOwnProperty(\"sort\") && data.select.length === 1) {\n                        this.columns.sort(data.select[0], data.sort, true)\n                    }\n                })\n            })\n        }\n\n        if (this.hasRows) {\n            this.data.forEach((row, i) => {\n                row.dataIndex = i\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n\n            if (this.selectedColumns.length) {\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.selectedColumns.includes(i)) {\n                            this.columnRenderers.forEach(options => {\n                                if (options.columns.includes(i)) {\n                                    cell.innerHTML = options.renderer.call(this, cell.data, cell, row)\n                                }\n                            })\n                        }\n                    })\n                })\n            }\n\n            this.columns.rebuild()\n        }\n\n        this.renderHeader()\n    }\n\n    /**\n     * Destroy the instance\n     * @return {void}\n     */\n    destroy() {\n        this.dom.innerHTML = this.initialLayout\n\n        // Remove the className\n        this.dom.classList.remove(\"dataTable-table\")\n\n        // Remove the containers\n        this.wrapper.parentNode.replaceChild(this.dom, this.wrapper)\n\n        this.initialized = false\n\n        window.removeEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * Update the instance\n     * @return {Void}\n     */\n    update() {\n        this.wrapper.classList.remove(\"dataTable-empty\")\n\n        this.paginate()\n        this.renderPage()\n\n        this.links = []\n\n        let i = this.pages.length\n        while (i--) {\n            const num = i + 1\n            this.links[i] = button(i === 0 ? \"active\" : \"\", num, num)\n        }\n\n        this.sorting = false\n\n        this.renderPager()\n\n        this.rows.update()\n\n        this.emit(\"datatable.update\")\n    }\n\n    /**\n     * Sort rows into pages\n     * @return {Number}\n     */\n    paginate() {\n        let rows = this.activeRows\n\n        if (this.searching) {\n            rows = []\n\n            this.searchData.forEach(index => rows.push(this.activeRows[index]))\n        }\n\n        if (this.options.paging) {\n            // Check for hidden columns\n            this.pages = rows\n                .map((tr, i) => i % this.options.perPage === 0 ? rows.slice(i, i + this.options.perPage) : null)\n                .filter(page => page)\n        } else {\n            this.pages = [rows]\n        }\n\n        this.totalPages = this.lastPage = this.pages.length\n\n        return this.totalPages\n    }\n\n    /**\n     * Fix column widths\n     * @return {Void}\n     */\n    fixColumns() {\n\n        if ((this.options.scrollY.length || this.options.fixedColumns) && this.activeHeadings && this.activeHeadings.length) {\n            let cells\n            let hd = false\n            this.columnWidths = []\n\n            // If we have headings we need only set the widths on them\n            // otherwise we need a temp header and the widths need applying to all cells\n            if (this.dom.tHead) {\n\n                if (this.options.scrollY.length) {\n                    hd = createElement(\"thead\")\n                    hd.appendChild(createElement(\"tr\"))\n                    hd.style.height = \"0px\"\n                    if (this.headerTable) {\n                        // move real header back into place\n                        this.dom.tHead = this.headerTable.tHead\n                    }\n                }\n\n                // Reset widths\n                this.activeHeadings.forEach(cell => {\n                    cell.style.width = \"\"\n                })\n\n                const totalOffsetWidth = this.activeHeadings.reduce(\n                    (total, cell) => total + cell.offsetWidth,\n                    0\n                )\n\n                this.activeHeadings.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / totalOffsetWidth * 100\n                    cell.style.width = `${w}%`\n                    this.columnWidths[i] = ow\n                    if (this.options.scrollY.length) {\n                        const th = createElement(\"th\")\n                        hd.firstElementChild.appendChild(th)\n                        th.style.width = `${w}%`\n                        th.style.paddingTop = \"0\"\n                        th.style.paddingBottom = \"0\"\n                        th.style.border = \"0\"\n                    }\n                })\n\n                if (this.options.scrollY.length) {\n                    const container = this.dom.parentElement\n                    if (!this.headerTable) {\n                        this.headerTable = createElement(\"table\", {\n                            class: \"dataTable-table\"\n                        })\n                        const headercontainer = createElement(\"div\", {\n                            class: \"dataTable-headercontainer\"\n                        })\n                        headercontainer.appendChild(this.headerTable)\n                        container.parentElement.insertBefore(headercontainer, container)\n                    }\n                    const thd = this.dom.tHead\n                    this.dom.replaceChild(hd, thd)\n                    this.headerTable.tHead = thd\n\n                    // Compensate for scrollbars.\n                    this.headerTable.parentElement.style.paddingRight = `${\n                        this.headerTable.clientWidth -\n                        this.dom.clientWidth +\n                        parseInt(\n                            this.headerTable.parentElement.style.paddingRight ||\n                            \"0\",\n                            10\n                        )\n                    }px`\n\n                    if (container.scrollHeight > container.clientHeight) {\n                        // scrollbars on one page means scrollbars on all pages.\n                        container.style.overflowY = \"scroll\"\n                    }\n                }\n\n            } else {\n                cells = []\n\n                // Make temperary headings\n                hd = createElement(\"thead\")\n                const r = createElement(\"tr\")\n                Array.from(this.dom.tBodies[0].rows[0].cells).forEach(() => {\n                    const th = createElement(\"th\")\n                    r.appendChild(th)\n                    cells.push(th)\n                })\n\n                hd.appendChild(r)\n                this.dom.insertBefore(hd, this.body)\n\n                const widths = []\n                cells.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    widths.push(w)\n                    this.columnWidths[i] = ow\n                })\n\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.columns.visible(cell.cellIndex))\n                            cell.style.width = `${widths[i]}%`\n                    })\n                })\n\n                // Discard the temp header\n                this.dom.removeChild(hd)\n            }\n        }\n    }\n\n    /**\n     * Fix the container height\n     * @return {Void}\n     */\n    fixHeight() {\n        if (this.options.fixedHeight) {\n            this.container.style.height = null\n            this.rect = this.container.getBoundingClientRect()\n            this.container.style.height = `${this.rect.height}px`\n        }\n    }\n\n    /**\n     * Perform a search of the data set\n     * @param  {string} query\n     * @return {void}\n     */\n    search(query) {\n        if (!this.hasRows) return false\n\n        query = query.toLowerCase()\n\n        this.currentPage = 1\n        this.searching = true\n        this.searchData = []\n\n        if (!query.length) {\n            this.searching = false\n            this.update()\n            this.emit(\"datatable.search\", query, this.searchData)\n            this.wrapper.classList.remove(\"search-results\")\n            return false\n        }\n\n        this.clear()\n\n        this.data.forEach((row, idx) => {\n            const inArray = this.searchData.includes(row)\n\n            // https://github.com/Mobius1/Vanilla-DataTables/issues/12\n            const doesQueryMatch = query.split(\" \").reduce((bool, word) => {\n                let includes = false\n                let cell = null\n                let content = null\n\n                for (let x = 0; x < row.cells.length; x++) {\n                    cell = row.cells[x]\n                    content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.textContent\n\n                    if (\n                        content.toLowerCase().includes(word) &&\n                        this.columns.visible(cell.cellIndex)\n                    ) {\n                        includes = true\n                        break\n                    }\n                }\n\n                return bool && includes\n            }, true)\n\n            if (doesQueryMatch && !inArray) {\n                row.searchIndex = idx\n                this.searchData.push(idx)\n            } else {\n                row.searchIndex = null\n            }\n        })\n\n        this.wrapper.classList.add(\"search-results\")\n\n        if (!this.searchData.length) {\n            this.wrapper.classList.remove(\"search-results\")\n\n            this.setMessage(this.options.labels.noResults)\n        } else {\n            this.update()\n        }\n\n        this.emit(\"datatable.search\", query, this.searchData)\n    }\n\n    /**\n     * Change page\n     * @param  {int} page\n     * @return {void}\n     */\n    page(page, lastRowCursor=false) {\n        // We don't want to load the current page again.\n        if (page == this.currentPage) {\n            return false\n        }\n\n        if (!isNaN(page)) {\n            this.currentPage = parseInt(page, 10)\n        }\n\n        if (page > this.pages.length || page < 0) {\n            return false\n        }\n\n        this.renderPage(lastRowCursor)\n        this.renderPager()\n\n        this.emit(\"datatable.page\", page)\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} direction - asc or desc\n     * @return {void}\n     */\n    sortColumn(column, direction) {\n        // Use columns API until sortColumn method is removed\n        this.columns.sort(column, direction)\n    }\n\n    /**\n     * Add new row data\n     * @param {object} data\n     */\n    insert(data) {\n        let rows = []\n        if (isObject(data)) {\n            if (data.headings) {\n                if (!this.hasHeadings && !this.hasRows) {\n                    const tr = createElement(\"tr\")\n                    data.headings.forEach(heading => {\n                        const th = createElement(\"th\", {\n                            html: heading\n                        })\n\n                        tr.appendChild(th)\n                    })\n                    this.head.appendChild(tr)\n\n                    this.header = tr\n                    this.headings = [].slice.call(tr.cells)\n                    this.hasHeadings = true\n\n                    // Re-enable sorting if it was disabled due\n                    // to missing header\n                    this.options.sortable = this.initialSortable\n\n                    // Allow sorting on new header\n                    this.renderHeader()\n\n                    // Activate newly added headings\n                    this.activeHeadings = this.headings.slice()\n                }\n            }\n\n            if (data.data && Array.isArray(data.data)) {\n                rows = data.data\n            }\n        } else if (Array.isArray(data)) {\n            data.forEach(row => {\n                const r = []\n                Object.entries(row).forEach(([heading, cell]) => {\n\n                    const index = this.labels.indexOf(heading)\n\n                    if (index > -1) {\n                        r[index] = cell\n                    }\n                })\n                rows.push(r)\n            })\n        }\n\n        if (rows.length) {\n            this.rows.add(rows)\n\n            this.hasRows = true\n        }\n\n        this.update()\n        this.setColumns()\n        this.fixColumns()\n    }\n\n    /**\n     * Refresh the instance\n     * @return {void}\n     */\n    refresh() {\n        if (this.options.searchable) {\n            this.input.value = \"\"\n            this.searching = false\n        }\n        this.currentPage = 1\n        this.onFirstPage = true\n        this.update()\n\n        this.emit(\"datatable.refresh\")\n    }\n\n    /**\n     * Truncate the table\n     * @param  {mixes} html - HTML string or HTMLElement\n     * @return {void}\n     */\n    clear(html) {\n        if (this.body) {\n            flush(this.body)\n        }\n\n        let parent = this.body\n        if (!this.body) {\n            parent = this.dom\n        }\n\n        if (html) {\n            if (typeof html === \"string\") {\n                const frag = document.createDocumentFragment()\n                frag.innerHTML = html\n            }\n\n            parent.appendChild(html)\n        }\n    }\n\n    /**\n     * Export table to various formats (csv, txt or sql)\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    export(userOptions) {\n        if (!this.hasHeadings && !this.hasRows) return false\n\n        const headers = this.activeHeadings\n        let rows = []\n        const arr = []\n        let i\n        let x\n        let str\n        let link\n\n        const defaults = {\n            download: true,\n            skipColumn: [],\n\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\",\n\n            // sql\n            tableName: \"myTable\",\n\n            // json\n            replacer: null,\n            space: 4\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.type) {\n            if (options.type === \"txt\" || options.type === \"csv\") {\n                // Include headings\n                rows[0] = this.header\n            }\n\n            // Selection or whole table\n            if (options.selection) {\n                // Page number\n                if (!isNaN(options.selection)) {\n                    rows = rows.concat(this.pages[options.selection - 1])\n                } else if (Array.isArray(options.selection)) {\n                    // Array of page numbers\n                    for (i = 0; i < options.selection.length; i++) {\n                        rows = rows.concat(this.pages[options.selection[i] - 1])\n                    }\n                }\n            } else {\n                rows = rows.concat(this.activeRows)\n            }\n\n            // Only proceed if we have data\n            if (rows.length) {\n                if (options.type === \"txt\" || options.type === \"csv\") {\n                    str = \"\"\n\n                    for (i = 0; i < rows.length; i++) {\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns.visible(headers[x].originalCellIndex)\n                            ) {\n                                let text = rows[i].cells[x].textContent\n                                text = text.trim()\n                                text = text.replace(/\\s{2,}/g, \" \")\n                                text = text.replace(/\\n/g, \"  \")\n                                text = text.replace(/\"/g, \"\\\"\\\"\")\n                                //have to manually encode \"#\" as encodeURI leaves it as is.\n                                text = text.replace(/#/g, \"%23\")\n                                if (text.includes(\",\"))\n                                    text = `\"${text}\"`\n\n\n                                str += text + options.columnDelimiter\n                            }\n                        }\n                        // Remove trailing column delimiter\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // Apply line delimiter\n                        str += options.lineDelimiter\n                    }\n\n                    // Remove trailing line delimiter\n                    str = str.trim().substring(0, str.length - 1)\n\n                    if (options.download) {\n                        str = `data:text/csv;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"sql\") {\n                    // Begin INSERT statement\n                    str = `INSERT INTO \\`${options.tableName}\\` (`\n\n                    // Convert table headings to column names\n                    for (i = 0; i < headers.length; i++) {\n                        // Check for column skip and column visibility\n                        if (\n                            !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                            this.columns.visible(headers[i].originalCellIndex)\n                        ) {\n                            str += `\\`${headers[i].textContent}\\`,`\n                        }\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Begin VALUES\n                    str += \") VALUES \"\n\n                    // Iterate rows and convert cell data to column values\n                    for (i = 0; i < rows.length; i++) {\n                        str += \"(\"\n\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns.visible(headers[x].originalCellIndex)\n                            ) {\n                                str += `\"${rows[i].cells[x].textContent}\",`\n                            }\n                        }\n\n                        // Remove trailing comma\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // end VALUES\n                        str += \"),\"\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Add trailing colon\n                    str += \";\"\n\n                    if (options.download) {\n                        str = `data:application/sql;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"json\") {\n                    // Iterate rows\n                    for (x = 0; x < rows.length; x++) {\n                        arr[x] = arr[x] || {}\n                        // Iterate columns\n                        for (i = 0; i < headers.length; i++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                                this.columns.visible(headers[i].originalCellIndex)\n                            ) {\n                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent\n                            }\n                        }\n                    }\n\n                    // Convert the array of objects to JSON string\n                    str = JSON.stringify(arr, options.replacer, options.space)\n\n                    if (options.download) {\n                        str = `data:application/json;charset=utf-8,${str}`\n                    }\n                }\n\n                // Download\n                if (options.download) {\n                    // Filename\n                    options.filename = options.filename || \"datatable_export\"\n                    options.filename += `.${options.type}`\n\n                    str = encodeURI(str)\n\n                    // Create a link to trigger the download\n                    link = document.createElement(\"a\")\n                    link.href = str\n                    link.download = options.filename\n\n                    // Append the link\n                    document.body.appendChild(link)\n\n                    // Trigger the download\n                    link.click()\n\n                    // Remove the link\n                    document.body.removeChild(link)\n                }\n\n                return str\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Import data to the table\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    import(userOptions) {\n        let obj = false\n        const defaults = {\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\",\n            removeDoubleQuotes: false\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.data.length || isObject(options.data)) {\n            // Import CSV\n            if (options.type === \"csv\") {\n                obj = {\n                    data: []\n                }\n\n                // Split the string into rows\n                const rows = options.data.split(options.lineDelimiter)\n\n                if (rows.length) {\n\n                    if (options.headings) {\n                        obj.headings = rows[0].split(options.columnDelimiter)\n                        if (options.removeDoubleQuotes) {\n                            obj.headings = obj.headings.map(e => e.trim().replace(/(^\"|\"$)/g, \"\"))\n                        }\n                        rows.shift()\n                    }\n\n                    rows.forEach((row, i) => {\n                        obj.data[i] = []\n\n                        // Split the rows into values\n                        const values = row.split(options.columnDelimiter)\n\n                        if (values.length) {\n                            values.forEach(value => {\n                                if (options.removeDoubleQuotes) {\n                                    value = value.trim().replace(/(^\"|\"$)/g, \"\")\n                                }\n                                obj.data[i].push(value)\n                            })\n                        }\n                    })\n                }\n            } else if (options.type === \"json\") {\n                const json = isJson(options.data)\n\n                // Valid JSON string\n                if (json) {\n                    obj = {\n                        headings: [],\n                        data: []\n                    }\n\n                    json.forEach((data, i) => {\n                        obj.data[i] = []\n                        Object.entries(data).forEach(([column, value]) => {\n                            if (!obj.headings.includes(column)) {\n                                obj.headings.push(column)\n                            }\n\n                            obj.data[i].push(value)\n                        })\n                    })\n                } //else {\n                // console.warn(\"That's not valid JSON!\")\n                //}\n            }\n\n            if (isObject(options.data)) {\n                obj = options.data\n            }\n\n            if (obj) {\n                // Add the rows\n                this.insert(obj)\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Print the table\n     * @return {void}\n     */\n    print() {\n        const headings = this.activeHeadings\n        const rows = this.activeRows\n        const table = createElement(\"table\")\n        const thead = createElement(\"thead\")\n        const tbody = createElement(\"tbody\")\n\n        const tr = createElement(\"tr\")\n        headings.forEach(th => {\n            tr.appendChild(\n                createElement(\"th\", {\n                    html: th.textContent\n                })\n            )\n        })\n\n        thead.appendChild(tr)\n\n        rows.forEach(row => {\n            const tr = createElement(\"tr\")\n            Array.from(row.cells).forEach(cell => {\n                tr.appendChild(\n                    createElement(\"td\", {\n                        html: cell.textContent\n                    })\n                )\n            })\n            tbody.appendChild(tr)\n        })\n\n        table.appendChild(thead)\n        table.appendChild(tbody)\n\n        // Open new window\n        const w = window.open()\n\n        // Append the table to the body\n        w.document.body.appendChild(table)\n\n        // Print\n        w.print()\n    }\n\n    /**\n     * Show a message in the table\n     * @param {string} message\n     */\n    setMessage(message) {\n        let colspan = 1\n\n        if (this.hasRows) {\n            colspan = this.data[0].cells.length\n        } else if (this.activeHeadings.length) {\n            colspan = this.activeHeadings.length\n        }\n\n        this.wrapper.classList.add(\"dataTable-empty\")\n\n        if (this.label) {\n            this.label.innerHTML = \"\"\n        }\n        this.totalPages = 0\n        this.renderPager()\n\n        this.clear(\n            createElement(\"tr\", {\n                html: `<td class=\"dataTables-empty\" colspan=\"${colspan}\">${message}</td>`\n            })\n        )\n    }\n\n    /**\n     * Add custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    on(event, callback) {\n        this.events = this.events || {}\n        this.events[event] = this.events[event] || []\n        this.events[event].push(callback)\n    }\n\n    /**\n     * Remove custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    off(event, callback) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        this.events[event].splice(this.events[event].indexOf(callback), 1)\n    }\n\n    /**\n     * Fire custom event\n     * @param  {String} event\n     * @return {Void}\n     */\n    emit(event) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        for (let i = 0; i < this.events[event].length; i++) {\n            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))\n        }\n    }\n}\n"],"names":["isObject","val","Object","prototype","toString","call","createElement","nodeName","attrs","dom","document","attr","innerHTML","setAttribute","flush","el","NodeList","forEach","e","button","className","page","text","class","html","sortItems","a","b","c","d","length","f","value","g","h","i","Rows","constructor","dt","this","cursor","build","row","tr","headings","map","td","data","appendChild","setCursor","classList","remove","add","render","Array","isArray","push","hasRows","update","columns","rebuild","select","sort","splice","dataIndex","findRowIndex","columnIndex","findIndex","children","innerText","toLowerCase","includes","String","findRow","index","cols","cells","r","updateRow","Columns","swap","x","y","order","s","cell","temp","column","getAttribute","cloneNode","originalCellIndex","sortable","hiddenColumns","searchIndex","undefined","activeHeadings","activeRows","hide","show","indexOf","visible","th","isNaN","insert","heading","hiddenHeader","type","format","hasOwnProperty","renderHeader","removeChild","filter","dir","init","terms","filterState","originalData","filters","rowFilter","filteredRows","from","content","hasAttribute","clear","setMessage","options","labels","noRows","emit","hasHeadings","filterTerms","textContent","sorting","rows","alpha","numeric","n","waitFor","import","then","parseDate","date","Promise","all","importedFunctions","parseFunction","top","btm","num","replace","parseFloat","Number","contains","lastTh","removeAttribute","concat","indexes","v","searchData","cellIndex","dataToTable","thead","tbody","col","Error","tHead","tBodies","defaultConfig","searchable","paging","perPage","perPageSelect","nextPrev","firstLast","prevText","nextText","firstText","lastText","ellipsisText","ascText","descText","truncatePager","pagerDelta","scrollY","fixedColumns","fixedHeight","header","footer","tabIndex","rowNavigation","placeholder","noResults","info","layout","bottom","DataTable","table","querySelector","initialized","initialLayout","initialSortable","listeners","onResize","event","assign","currentPage","onFirstPage","columnRenderers","selectedColumns","setTimeout","plugins","entries","plugin","enabled","template","body","head","foot","tFoot","t","insertBefore","slice","wrapper","wrap","selected","option","Option","outerHTML","form","paginatorWrapper","paginator","container","pagers","querySelectorAll","label","parentNode","replaceChild","rect","getBoundingClientRect","setColumns","fixHeight","fixColumns","bindEvents","renderPage","lastRowCursor","totalPages","frag","createDocumentFragment","pages","onLastPage","lastPage","items","current","searching","string","renderPager","prev","next","pager","links","ellipsis","j","k","l","truncate","p","firstElementChild","link","href","selector","addEventListener","parseInt","input","search","target","closest","preventDefault","keyCode","previousElementSibling","stopPropagation","nextElementSibling","matches","find","window","width","ajax","renderer","hidden","destroy","removeEventListener","paginate","hd","columnWidths","style","height","headerTable","totalOffsetWidth","reduce","total","offsetWidth","ow","w","paddingTop","paddingBottom","border","parentElement","headercontainer","thd","paddingRight","clientWidth","scrollHeight","clientHeight","overflowY","widths","query","idx","inArray","split","bool","word","sortColumn","direction","refresh","parent","export","userOptions","headers","arr","str","download","skipColumn","lineDelimiter","columnDelimiter","tableName","replacer","space","selection","trim","substring","JSON","stringify","filename","encodeURI","click","obj","removeDoubleQuotes","shift","values","json","parse","isJson","print","open","message","colspan","on","callback","events","off","apply","arguments"],"mappings":"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"}